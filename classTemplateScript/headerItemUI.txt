/*
 * $$$NAME$$$.hpp
 *
 *  Created on: $$$DATE$$$
 *      Author: $$$AUTHOR$$$
 */

#ifndef $$$ONCE$$$
#define $$$ONCE$$$

#include <boost/shared_ptr.hpp>
#include <sambag/disco/components/ui/AComponentUI.hpp>

namespace sambag { namespace disco {
namespace components { namespace ui { namespace basic {

//=============================================================================
/** 
  * @class $$$NAME$$$.
  */
template <class ComponentModell>
class $$$NAME$$$ : public AComponentUI {
//=============================================================================
public:
	//-------------------------------------------------------------------------
	typedef boost::shared_ptr<$$$NAME$$$<ComponentModell> > Ptr;
protected:
	//-------------------------------------------------------------------------
	$$$NAME$$$();
private:
public:
	//-------------------------------------------------------------------------
	/**
	 * Configures the specified component appropriately for the look and feel.
	 * @param c
	 */
	virtual void installUI(AComponentPtr c);
	//-------------------------------------------------------------------------
	static Ptr create() {
		return Ptr(new $$$NAME$$$<ComponentModell>());
	}
	//-------------------------------------------------------------------------
	/**
	 * Paints the specified component appropriately for the look and feel.
	 * @param cn
	 * @param c
	 */
	virtual void draw(IDrawContext::Ptr cn, AComponentPtr c);
	//-------------------------------------------------------------------------
	/**
	 * Returns the specified component's maximum size appropriate for the
	 * look and feel.
	 * @param c
	 * @return
	 */
	virtual Dimension getMaximumSize(AComponentPtr c);
	//-------------------------------------------------------------------------
	virtual Dimension getMinimumSize(AComponentPtr c);
	//-------------------------------------------------------------------------
	/**
	 * Returns the specified component's preferred size appropriate for the
	 * look and feel.
	 * @param c
	 * @return
	 */
	virtual Dimension getPreferredSize(AComponentPtr c);
}; // $$$NAME$$$
///////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
template <class ComponentModell>
$$$NAME$$$<ComponentModell>::$$$NAME$$$() {
}
//-----------------------------------------------------------------------------
template <class ComponentModell>
void $$$NAME$$$<ComponentModell>::draw(IDrawContext::Ptr cn, AComponentPtr c) {

}
//-----------------------------------------------------------------------------
template <class ComponentModell>
void $$$NAME$$$<ComponentModell>::installUI(AComponentPtr c) {
	
}
//-----------------------------------------------------------------------------
template <class ComponentModell>
void $$$NAME$$$<ComponentModell>::onButtonStateChanged(void *src, const
			typename AbstractButton::StateChangedEvent &ev)
{
	
}
//------------------------------------------------------------------------------
template <class ComponentModell>
Dimension $$$NAME$$$<ComponentModell>::getMaximumSize(AComponentPtr c) {
	return getPreferredSize(c);
}
//-----------------------------------------------------------------------------
template <class ComponentModell>
Dimension $$$NAME$$$<ComponentModell>::getMinimumSize(AComponentPtr c) {
	return getPreferredSize(c);
}
//-----------------------------------------------------------------------------
template <class ComponentModell>
Dimension $$$NAME$$$<ComponentModell>::getPreferredSize(AComponentPtr c) {
	return NULL_DIMENSION;
}


///////////////////////////////////////////////////////////////////////////////
}}}}} // namespace(s)

#endif /* SAMBAG_$$$NAME$$$_H */

