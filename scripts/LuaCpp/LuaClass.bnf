int = ?/[-+]?[0-9]+/? ;
float = ?/[-+]?(\d+\.\d*)|(\d*\.\d+)/? ;
number = (float|int) ;
word = ?/[a-zA-Z_]+/? ;
name = ?/[a-zA-Z_][a-zA-Z0-9]*/? ;
metaName = ?/__[a-zA-Z][a-zA-Z0-9]*/? ;
lcName = "?" @:?/[a-zA-Z][a-zA-Z0-9]*/? ;
commentText = ?/.*?(?=\*/|$)/? ;
defaultComment= "/*" comment:{commentText} "*/" ;
docComment = "/**" docComment:{commentText} "*/" ;
singleComment = "//" ?/.*/? ;
comment = (docComment|defaultComment|singleComment) ;
manuallyReturn = (type:"ManuallyReturn" "<" value:int ">") ;
type = ( "int" | "float" | "double" | "string" | "bool" ) ;
def = comment:{comment}type:type name:name "=" value:number ";";
arg = type:type name:name;
return = type|manuallyReturn|"void";
fDef = comment:{comment} return:return name:name "(" [args+:arg {"," args+:arg}]  ")" ";" ;
mfDef = comment:{comment} return:return name:metaName "(" [args+:arg {"," args+:arg}]  ")" ";" ;
lcfDef = comment:{comment} return:return name:lcName "(" [args+:arg {"," args+:arg}]  ")" ";" ;
ns = ns+:name { "." ns+:name } ;
class = [namespace:ns] comment:{comment} "class" name:name ["extends" extends:name ] "{" {comment|fields+:def|metaFunctions+:mfDef|functions+:fDef|lcFDefs+:lcfDef}* "}" $ ; 
