#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import * # @UnusedWildImport
from grako.exceptions import * # @UnusedWildImport

__version__ = '14.113.09.15.15'

class LuaClassParser(Parser):
    def __init__(self, whitespace=None, nameguard=True, **kwargs):
        super(LuaClassParser, self).__init__(whitespace=whitespace,
            nameguard=nameguard, **kwargs)

    @rule_def
    def _int_(self):
        self._pattern(r'[-+]?[0-9]+')

    @rule_def
    def _float_(self):
        self._pattern(r'[-+]?(\d+\.\d*)|(\d*\.\d+)')

    @rule_def
    def _number_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._float_()
                with self._option():
                    self._int_()
                self._error('no available options')

    @rule_def
    def _word_(self):
        self._pattern(r'[a-zA-Z_]+')

    @rule_def
    def _name_(self):
        self._pattern(r'[a-zA-Z_][a-zA-Z0-9]*')

    @rule_def
    def _metaName_(self):
        self._pattern(r'__[a-zA-Z][a-zA-Z0-9]*')

    @rule_def
    def _lcName_(self):
        self._token('?')
        self._pattern(r'[a-zA-Z][a-zA-Z0-9]*')
        self.ast['@'] = self.last_node

    @rule_def
    def _commentText_(self):
        self._pattern(r'.*?(?=\*/|$)')

    @rule_def
    def _defaultComment_(self):
        self._token('/*')
        def block1():
            self._commentText_()
        self._closure(block1)
        self.ast['comment'] = self.last_node
        self._token('*/')

    @rule_def
    def _docComment_(self):
        self._token('/**')
        def block0():
            self._token('*')
        self._closure(block0)
        def block2():
            self._commentText_()
        self._closure(block2)
        self.ast['docComment'] = self.last_node
        self._token('*/')

    @rule_def
    def _singleComment_(self):
        self._token('//')
        self._pattern(r'.*')

    @rule_def
    def _comment_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._docComment_()
                with self._option():
                    self._defaultComment_()
                with self._option():
                    self._singleComment_()
                self._error('no available options')

    @rule_def
    def _manuallyReturn_(self):
        with self._group():
            self._token('ManuallyReturn')
            self.ast['type'] = self.last_node
            self._token('<')
            self._int_()
            self.ast['value'] = self.last_node
            self._token('>')

    @rule_def
    def _type_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('int')
                with self._option():
                    self._token('float')
                with self._option():
                    self._token('double')
                with self._option():
                    self._token('string')
                with self._option():
                    self._token('bool')
                self._error('expecting one of: string int float double bool')

    @rule_def
    def _def_(self):
        def block1():
            self._comment_()
        self._closure(block1)
        self.ast['comment'] = self.last_node
        self._type_()
        self.ast['type'] = self.last_node
        self._name_()
        self.ast['name'] = self.last_node
        self._token('=')
        with self._group():
            with self._choice():
                with self._option():
                    self._number_()
                with self._option():
                    self._pattern(r'\".*\"')
                self._error('expecting one of: ".*"')
        self.ast['value'] = self.last_node
        self._token(';')

    @rule_def
    def _arg_(self):
        self._type_()
        self.ast['type'] = self.last_node
        self._name_()
        self.ast['name'] = self.last_node

    @rule_def
    def _return_(self):
        with self._choice():
            with self._option():
                self._type_()
            with self._option():
                self._manuallyReturn_()
            with self._option():
                self._token('void')
            self._error('expecting one of: void')

    @rule_def
    def _fDef_(self):
        def block1():
            self._comment_()
        self._closure(block1)
        self.ast['comment'] = self.last_node
        self._return_()
        self.ast['return_'] = self.last_node
        self._name_()
        self.ast['name'] = self.last_node
        self._token('(')
        with self._optional():
            self._arg_()
            self.ast.add_list('args', self.last_node)
            def block5():
                self._token(',')
                self._arg_()
                self.ast.add_list('args', self.last_node)
            self._closure(block5)
        self._token(')')
        self._token(';')

    @rule_def
    def _lcfDef_(self):
        def block1():
            self._comment_()
        self._closure(block1)
        self.ast['comment'] = self.last_node
        self._return_()
        self.ast['return_'] = self.last_node
        self._lcName_()
        self.ast['name'] = self.last_node
        self._token('(')
        with self._optional():
            self._arg_()
            self.ast.add_list('args', self.last_node)
            def block5():
                self._token(',')
                self._arg_()
                self.ast.add_list('args', self.last_node)
            self._closure(block5)
        self._token(')')
        self._token(';')

    @rule_def
    def _ns_(self):
        self._name_()
        self.ast.add_list('ns', self.last_node)
        def block1():
            self._token('.')
            self._name_()
            self.ast.add_list('ns', self.last_node)
        self._closure(block1)

    @rule_def
    def _class_(self):
        with self._optional():
            self._ns_()
            self.ast['namespace'] = self.last_node
        def block2():
            self._comment_()
        self._closure(block2)
        self.ast['comment'] = self.last_node
        self._token('class')
        self._name_()
        self.ast['name'] = self.last_node
        with self._optional():
            self._token('extends')
            self._name_()
            self.ast['extends'] = self.last_node
        self._token('{')
        def block5():
            with self._choice():
                with self._option():
                    self._def_()
                    self.ast.add_list('fields', self.last_node)
                with self._option():
                    self._fDef_()
                    self.ast.add_list('functions', self.last_node)
                with self._option():
                    self._lcfDef_()
                    self.ast.add_list('lcFDefs', self.last_node)
                self._error('no available options')
        self._closure(block5)
        self._token('}')
        self._check_eof()



class LuaClassSemanticParser(CheckSemanticsMixin, LuaClassParser):
    pass


class LuaClassSemantics(object):
    def int(self, ast):
        return ast

    def float(self, ast):
        return ast

    def number(self, ast):
        return ast

    def word(self, ast):
        return ast

    def name(self, ast):
        return ast

    def metaName(self, ast):
        return ast

    def lcName(self, ast):
        return ast

    def commentText(self, ast):
        return ast

    def defaultComment(self, ast):
        return ast

    def docComment(self, ast):
        return ast

    def singleComment(self, ast):
        return ast

    def comment(self, ast):
        return ast

    def manuallyReturn(self, ast):
        return ast

    def type(self, ast):
        return ast

    def def_(self, ast):
        return ast

    def arg(self, ast):
        return ast

    def return_(self, ast):
        return ast

    def fDef(self, ast):
        return ast

    def lcfDef(self, ast):
        return ast

    def ns(self, ast):
        return ast

    def class_(self, ast):
        return ast

def main(filename, startrule, trace=False):
    import json
    with open(filename) as f:
        text = f.read()
    parser = LuaClassParser(parseinfo=False)
    ast = parser.parse(text, startrule, filename=filename, trace=trace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import sys
    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in LuaClassParser.rule_list():
                print(r)
            print()
            sys.exit(0)
    parser = argparse.ArgumentParser(description="Simple parser for LuaClass.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace)

