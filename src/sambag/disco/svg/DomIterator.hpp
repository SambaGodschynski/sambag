/*
 * DomIterator.hpp
 *
 *  Created on: 17.10.2011
 *      Author: samba
 */

#ifndef DOMITERATOR_HPP_
#define DOMITERATOR_HPP_

#include "DomObject.hpp"
#include <boost/shared_ptr.hpp>

namespace sambag { namespace disco { namespace svg {
//=============================================================================
/**
*  Class DomIterator.
*/
class DomIterator  {
//=============================================================================
public:
	//-------------------------------------------------------------------------
	typedef boost::shared_ptr<DomIterator> Ptr;
	//-------------------------------------------------------------------------
private:
	//-------------------------------------------------------------------------
	DomObject *currObj;
	//-------------------------------------------------------------------------
	Ptr nestedIterator;
protected:
	//-------------------------------------------------------------------------
	DomIterator(DomObject* obj);
	//-------------------------------------------------------------------------
	DomIterator(Ptr iterator);
	//-------------------------------------------------------------------------
public:
	//-------------------------------------------------------------------------
	static Ptr allSiblingObjects(DomObject *obj);
	//-------------------------------------------------------------------------
	static Ptr allSiblingObjects(Ptr iterator);
	//-------------------------------------------------------------------------
	virtual DomObject * next() = 0;
	//-------------------------------------------------------------------------
	virtual bool hasNext() const = 0;
};

//=============================================================================
/**
*  Class AllSiblingObjects.
*/
class AllSiblingObjects  {
//=============================================================================
public:
	//-------------------------------------------------------------------------
	typedef boost::shared_ptr<DomIterator> Ptr;
	//-------------------------------------------------------------------------
private:
	//-------------------------------------------------------------------------
	Ptr nestedIterator;
protected:
	//-------------------------------------------------------------------------
	AllSiblingObjects(Ptr iterator);
	//-------------------------------------------------------------------------
public:
	//-------------------------------------------------------------------------
	static Ptr allSiblingObjects(Ptr iterator);
	//-------------------------------------------------------------------------
	virtual DomObject * next() = 0;
	//-------------------------------------------------------------------------
	virtual bool hasNext() const = 0;
};

}}} // namespace



#endif /* DOMITERATOR_HPP_ */
