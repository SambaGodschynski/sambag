/*
 * TestVst3MidiEvents.cpp
 *
 *  Created on: Mon Feb 16 21:10:49 2015
 *      Author: Johannes Unger
 */

#include "TestVst3MidiEvents.hpp"
#include <cppunit/config/SourcePrefix.h>
#include <sambag/dsp/DefaultMidiEvents.hpp>
#include <sambag/dsp/Vst3MidiEvents.hpp>
#include <sambag/dsp/VstMidiEventAdapter.hpp>

// Registers the fixture into the 'registry'
CPPUNIT_TEST_SUITE_REGISTRATION( tests::TestVst3MidiEvents );

namespace tests {
//=============================================================================
//  Class TestVst3MidiEvents
//=============================================================================
//-----------------------------------------------------------------------------
void TestVst3MidiEvents::testHandleNull() {
    using namespace sambag::dsp;
    using namespace Steinberg;
    using namespace sambag::dsp;
    DefaultMidiEvents::Ptr a = DefaultMidiEvents::create();
    // create data stream splitted to several events
    {
        IMidiEvents::Data data[] = {0x80,0x39,0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    Vst3MidiAdapter::Ptr ad = Vst3MidiAdapter::create();
    ad->set( a );
    CPPUNIT_ASSERT_EQUAL((Steinberg::int32)1, ad->getEventCount());
    ad->set( IMidiEvents::Ptr() );
    CPPUNIT_ASSERT_EQUAL((Steinberg::int32)0, ad->getEventCount());
}
//-----------------------------------------------------------------------------
void TestVst3MidiEvents::testNoteOffBug() {
/*

In Reaper press stop while playing a loop -> the last note on will be ignored.

[0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb0, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb1, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe1, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb2, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe2, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb3, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe3, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb4, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe4, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb5, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe5, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb6, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe6, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb7, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe7, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb8, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe8, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffb9, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe9, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffba, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffea, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffbb, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffeb, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffbc, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffec, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffbd, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffed, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffbe, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffee, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffbf, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffef, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, [0]: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffff80, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 
B NOTE ON 0, 0, <6774> ??? -> the last event was 0x80, 0x3e, 0x0
    Problem: there are a lot of midi events which are not handled by VST3 so our adapter
    returns a lot of Steinberg::kResultFalse; on getEvent(). So we filter the unused events during set(IMidiEvent).

*/
	using namespace sambag::dsp;
    DefaultMidiEvents::Ptr a = DefaultMidiEvents::create();
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb1, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe1, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb2, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffe2, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb3, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe3, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0,};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe4, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb5, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe5, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb6, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe6, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb7, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe7, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb9, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe9, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbb, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xeb, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbc, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xec, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbd, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xed, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbe, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbf, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xef, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    {
        IMidiEvents::Data data[] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
        size_t bytes = sizeof(data) / sizeof(data[0]);
        a->insertDeep(IMidiEvents::MidiEvent(bytes, 0, &data[0]));
    }
    using namespace sambag::dsp;
    using namespace Steinberg;
    Vst3MidiAdapter::Ptr ad = Vst3MidiAdapter::create();
    ad->set( VstMidiEventAdapter::create(a) );
    CPPUNIT_ASSERT_EQUAL((Steinberg::int32)1, ad->getEventCount());
    Vst::Event ev;
    ad->getEvent(0, ev);
    CPPUNIT_ASSERT_EQUAL((uint16)Vst::Event::kNoteOffEvent, ev.type);
    CPPUNIT_ASSERT_EQUAL((int16)0x3e, ev.noteOff.pitch);
    CPPUNIT_ASSERT_EQUAL(0.0f, ev.noteOff.velocity);
    
}
} //namespace
